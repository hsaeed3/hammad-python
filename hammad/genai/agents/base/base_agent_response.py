"""hammad.genai.agents.base.base_agent_response"""

from dataclasses import dataclass
from typing import List

from ....cache import cached
from ...language_models.language_model_response import (
    LanguageModelResponse, T
)


__all__ = [
    "BaseAgentResponse",
    "_create_agent_response_from_language_model_response",
]


def _create_agent_response_from_language_model_response(
    response : LanguageModelResponse[T],
    steps : List[LanguageModelResponse[str]] | None = None
) -> "BaseAgentResponse[T]":
    """Create a BaseAgentResponse from a LanguageModelResponse."""
    response_dict = response.model_dump()

    try:
        return BaseAgentResponse(
            **response_dict,
            steps = steps or [],
        )
    except Exception as e:
        raise ValueError(
            "Failed to create BaseAgentResponse from LanguageModelResponse."
        ) from e


class BaseAgentResponse(LanguageModelResponse[T]):
    """A response generated by an agent, that includes the steps and final
    output during the agent's execution."""

    steps : List[LanguageModelResponse[str]]
    """
    A list of steps taken by the agent **BEFORE** its final output.

    NOTE: If the final output was also the first step, this will be
    empty.
    """

    @cached
    def __str__(self) -> str:
        """Pretty prints the response object."""
        output = "BaseAgentResponse:"

        if self.output or self.content:
            output += f"\n{self.output if self.output else self.content}"
        else:
            output += f"\n{self.completion}"

        output += f"\n\n>>> Model: {self.model}"
        # NOTE:
        # added +1 to include final step in the output
        output += f"\n>>> Steps: {len(self.steps) + 1}"
        output += f"\n>>> Tool Calls: {len(self.tool_calls) if self.tool_calls else 0}"

        # Calculate total tool calls across all steps
        total_tool_calls = 0
        for step in self.steps:
            if step.has_tool_calls():
                total_tool_calls += len(step.tool_calls)
        
        output += f"\n>>> Total Tool Calls: {total_tool_calls}"

        return output